// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getSlidesSlidesGet, getBoundingBoxBoxesSlideFilenameGet, setBoundingBoxBoxesSlideFilenamePut, getBoxesStatusBoxesStatusGet, getLabelStatsLabelStatsGet, getSlideImageSlidesSlideFilenameImageGet, deidentifySlideSlidesSlideFilenameDeidentifyPost, deidentifyAllSlidesSlidesDeidentifyAllPost } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetSlidesSlidesGetData, GetBoundingBoxBoxesSlideFilenameGetData, SetBoundingBoxBoxesSlideFilenamePutData, SetBoundingBoxBoxesSlideFilenamePutResponse, GetBoxesStatusBoxesStatusGetData, GetLabelStatsLabelStatsGetData, GetSlideImageSlidesSlideFilenameImageGetData, DeidentifySlideSlidesSlideFilenameDeidentifyPostData, DeidentifySlideSlidesSlideFilenameDeidentifyPostResponse, DeidentifyAllSlidesSlidesDeidentifyAllPostData, DeidentifyAllSlidesSlidesDeidentifyAllPostResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getSlidesSlidesGetQueryKey = (options?: Options<GetSlidesSlidesGetData>) => createQueryKey('getSlidesSlidesGet', options);

export const getSlidesSlidesGetOptions = (options?: Options<GetSlidesSlidesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSlidesSlidesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSlidesSlidesGetQueryKey(options)
    });
};

export const getBoundingBoxBoxesSlideFilenameGetQueryKey = (options: Options<GetBoundingBoxBoxesSlideFilenameGetData>) => createQueryKey('getBoundingBoxBoxesSlideFilenameGet', options);

export const getBoundingBoxBoxesSlideFilenameGetOptions = (options: Options<GetBoundingBoxBoxesSlideFilenameGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBoundingBoxBoxesSlideFilenameGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBoundingBoxBoxesSlideFilenameGetQueryKey(options)
    });
};

export const setBoundingBoxBoxesSlideFilenamePutMutation = (options?: Partial<Options<SetBoundingBoxBoxesSlideFilenamePutData>>): UseMutationOptions<SetBoundingBoxBoxesSlideFilenamePutResponse, DefaultError, Options<SetBoundingBoxBoxesSlideFilenamePutData>> => {
    const mutationOptions: UseMutationOptions<SetBoundingBoxBoxesSlideFilenamePutResponse, DefaultError, Options<SetBoundingBoxBoxesSlideFilenamePutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setBoundingBoxBoxesSlideFilenamePut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBoxesStatusBoxesStatusGetQueryKey = (options?: Options<GetBoxesStatusBoxesStatusGetData>) => createQueryKey('getBoxesStatusBoxesStatusGet', options);

export const getBoxesStatusBoxesStatusGetOptions = (options?: Options<GetBoxesStatusBoxesStatusGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBoxesStatusBoxesStatusGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBoxesStatusBoxesStatusGetQueryKey(options)
    });
};

export const getLabelStatsLabelStatsGetQueryKey = (options?: Options<GetLabelStatsLabelStatsGetData>) => createQueryKey('getLabelStatsLabelStatsGet', options);

export const getLabelStatsLabelStatsGetOptions = (options?: Options<GetLabelStatsLabelStatsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLabelStatsLabelStatsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLabelStatsLabelStatsGetQueryKey(options)
    });
};

export const getSlideImageSlidesSlideFilenameImageGetQueryKey = (options: Options<GetSlideImageSlidesSlideFilenameImageGetData>) => createQueryKey('getSlideImageSlidesSlideFilenameImageGet', options);

export const getSlideImageSlidesSlideFilenameImageGetOptions = (options: Options<GetSlideImageSlidesSlideFilenameImageGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSlideImageSlidesSlideFilenameImageGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSlideImageSlidesSlideFilenameImageGetQueryKey(options)
    });
};

export const deidentifySlideSlidesSlideFilenameDeidentifyPostQueryKey = (options: Options<DeidentifySlideSlidesSlideFilenameDeidentifyPostData>) => createQueryKey('deidentifySlideSlidesSlideFilenameDeidentifyPost', options);

export const deidentifySlideSlidesSlideFilenameDeidentifyPostOptions = (options: Options<DeidentifySlideSlidesSlideFilenameDeidentifyPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deidentifySlideSlidesSlideFilenameDeidentifyPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: deidentifySlideSlidesSlideFilenameDeidentifyPostQueryKey(options)
    });
};

export const deidentifySlideSlidesSlideFilenameDeidentifyPostMutation = (options?: Partial<Options<DeidentifySlideSlidesSlideFilenameDeidentifyPostData>>): UseMutationOptions<DeidentifySlideSlidesSlideFilenameDeidentifyPostResponse, DefaultError, Options<DeidentifySlideSlidesSlideFilenameDeidentifyPostData>> => {
    const mutationOptions: UseMutationOptions<DeidentifySlideSlidesSlideFilenameDeidentifyPostResponse, DefaultError, Options<DeidentifySlideSlidesSlideFilenameDeidentifyPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deidentifySlideSlidesSlideFilenameDeidentifyPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deidentifyAllSlidesSlidesDeidentifyAllPostQueryKey = (options?: Options<DeidentifyAllSlidesSlidesDeidentifyAllPostData>) => createQueryKey('deidentifyAllSlidesSlidesDeidentifyAllPost', options);

export const deidentifyAllSlidesSlidesDeidentifyAllPostOptions = (options?: Options<DeidentifyAllSlidesSlidesDeidentifyAllPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deidentifyAllSlidesSlidesDeidentifyAllPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: deidentifyAllSlidesSlidesDeidentifyAllPostQueryKey(options)
    });
};

export const deidentifyAllSlidesSlidesDeidentifyAllPostMutation = (options?: Partial<Options<DeidentifyAllSlidesSlidesDeidentifyAllPostData>>): UseMutationOptions<DeidentifyAllSlidesSlidesDeidentifyAllPostResponse, DefaultError, Options<DeidentifyAllSlidesSlidesDeidentifyAllPostData>> => {
    const mutationOptions: UseMutationOptions<DeidentifyAllSlidesSlidesDeidentifyAllPostResponse, DefaultError, Options<DeidentifyAllSlidesSlidesDeidentifyAllPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deidentifyAllSlidesSlidesDeidentifyAllPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};